import React from 'react';
import { observable } from 'mobx';
import { observer } from 'mobx-react';
import './JBSwitch.css';
import PropTypes from 'prop-types';

var _class, _temp;

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var JBSwitchService = observer(_class = (_temp =
/*#__PURE__*/
function (_React$Component) {
  _inherits(JBSwitchService, _React$Component);

  function JBSwitchService(config) {
    var _this;

    _classCallCheck(this, JBSwitchService);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(JBSwitchService).call(this));

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "JBSwitchComponentDom", null);

    _this.config = observable(config);
    return _this;
  }

  _createClass(JBSwitchService, [{
    key: "componentWillReceiveProps",
    value: function componentWillReceiveProps(nextProps) {
      if (this.config.value != nextProps.value) {
        this.config.value = nextProps.value;
      }
    }
  }, {
    key: "onClick",
    value: function onClick() {
      var _this2 = this;

      //call onChange callback
      //temporary we do it ourself
      //we dont make it reacive
      var value = !this.config.value;
      var event = new Event("change", {
        detail: {
          oldValue: this.config.value,
          newValue: value
        },
        bubbles: true,
        cancelable: true
      });
      event.simulated = true;
      var tracker = this.JBSwitchComponentDom._valueTracker;

      if (tracker) {
        tracker.setValue(value);
      }

      this.JBSwitchComponentDom.value = value;

      this.JBSwitchComponentDom.onchange = function (e) {
        return _this2.config.onChange(e);
      };

      this.JBSwitchComponentDom.dispatchEvent(event);
    }
  }]);

  return JBSwitchService;
}(React.Component), _temp)) || _class;

var _class$1;

function _typeof$1(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof$1 = function _typeof(obj) { return typeof obj; }; } else { _typeof$1 = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof$1(obj); }

function _classCallCheck$1(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties$1(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass$1(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties$1(Constructor.prototype, protoProps); if (staticProps) _defineProperties$1(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn$1(self, call) { if (call && (_typeof$1(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized$1(self); }

function _assertThisInitialized$1(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf$1(o) { _getPrototypeOf$1 = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf$1(o); }

function _inherits$1(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf$1(subClass, superClass); }

function _setPrototypeOf$1(o, p) { _setPrototypeOf$1 = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf$1(o, p); }

var JBSwitch = observer(_class$1 =
/*#__PURE__*/
function (_JBSwitchService) {
  _inherits$1(JBSwitch, _JBSwitchService);

  function JBSwitch(config) {
    _classCallCheck$1(this, JBSwitch);

    return _possibleConstructorReturn$1(this, _getPrototypeOf$1(JBSwitch).call(this, config));
  }

  _createClass$1(JBSwitch, [{
    key: "render",
    value: function render() {
      var _this = this;

      var renderDom = React.createElement("div", {
        className: "jb-switch-component-wrapper",
        ref: function ref(dom) {
          _this.JBSwitchComponentDom = dom;
        }
      }, React.createElement("div", {
        className: "caption " + (this.config.value ? 'active' : '')
      }, this.config.trueTitle ? this.config.trueTitle : ''), React.createElement("div", {
        className: "svg-wrapper",
        onClick: function onClick(e) {
          return _this.onClick(e);
        }
      }, React.createElement("svg", {
        className: "switch-svg " + (this.config.value ? 'active' : ''),
        viewBox: "0 0 710 440"
      }, React.createElement("defs", null, React.createElement("filter", {
        xmlns: "http://www.w3.org/2000/svg",
        id: "dropshadow",
        height: "150%"
      }, React.createElement("feGaussianBlur", {
        in: "SourceAlpha",
        stdDeviation: "7"
      }), React.createElement("feOffset", {
        dx: "0",
        dy: "0",
        result: "offsetblur"
      }), React.createElement("feComponentTransfer", null, React.createElement("feFuncA", {
        type: "linear",
        slope: "0.9"
      })), React.createElement("feMerge", null, React.createElement("feMergeNode", null), React.createElement("feMergeNode", {
        in: "SourceGraphic"
      }))), React.createElement("radialGradient", {
        id: "color1",
        cx: "50%",
        cy: "50%",
        r: "75%"
      }, React.createElement("stop", {
        offset: "0%",
        style: {
          stopColor: "rgb(255,255,255)",
          stopOpacity: "1"
        }
      }), React.createElement("stop", {
        offset: "99%",
        style: {
          stopColor: "rgb(224,224,224)",
          stopOpacity: "1"
        }
      }), React.createElement("stop", {
        offset: "100%",
        style: {
          stopColor: "rgb(224,224,224)",
          stopOpacity: "1"
        }
      }))), React.createElement("rect", {
        className: "bg-bar",
        x: "20",
        y: "40",
        height: "360",
        width: "680",
        stroke: "red",
        rx: "180",
        strokeWidth: "0"
      }), React.createElement("circle", {
        className: "trigger-circle",
        fill: "url(#color1)",
        cx: "220",
        cy: "220",
        r: "200",
        filter: "url(#dropshadow)"
      }), React.createElement("circle", {
        className: "trigger-circle-bar",
        cx: "220",
        cy: "220",
        r: "120",
        filter: "url(#dropshadow)"
      }))), React.createElement("div", {
        className: "caption " + (!this.config.value ? 'active' : '')
      }, this.config.falseTitle ? this.config.falseTitle : ''));
      return renderDom;
    }
  }]);

  return JBSwitch;
}(JBSwitchService)) || _class$1;

JBSwitch.propTypes = {
  value: PropTypes.bool.isRequired,
  onChange: PropTypes.func,
  trueTitle: PropTypes.string,
  falseTitle: PropTypes.string,
  //if we set it to true component will update value by it self and dont need to update value in onChange event 
  //onChange still calling but not necessary anymore
  reactive: PropTypes.bool
};

export default JBSwitch;
